from flask import Flask, request, render_template
import os, zipfile, tempfile
from PIL import Image
import numpy as np
import pefile
from io import BytesIO

app = Flask(__name__)

def extract_pe_header_bytes(file_path, header_size=1024):
    with open(file_path, 'rb') as f:
        pe = pefile.PE(data=f.read())
        f.seek(0)
        header_bytes = f.read(header_size)
    return header_bytes

def bytes_to_image(byte_data, width=32):
    padded_length = width * ((len(byte_data) + width - 1) // width)
    padded_bytes = byte_data + bytes(padded_length - len(byte_data))
    img_array = np.frombuffer(padded_bytes, dtype=np.uint8).reshape(-1, width)
    return Image.fromarray(img_array).convert("L")

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        uploaded_file = request.files['file']
        password = request.form.get('password')  # Get the password from the form
        if uploaded_file.filename.endswith('.zip'):
            try:
                with tempfile.TemporaryDirectory() as temp_dir:
                    zip_path = os.path.join(temp_dir, uploaded_file.filename)
                    uploaded_file.save(zip_path)

                    # Open the zip file with the password provided
                    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                        zip_ref.setpassword(password.encode())  # Set the password for extraction
                        zip_ref.testzip()  # Test the zip file to ensure password is correct
                        zip_ref.extractall(temp_dir)  # Extract the contents

                    # Find the first .exe file in the extracted files
                    exe_files = [os.path.join(temp_dir, f) for f in os.listdir(temp_dir) if f.endswith('.exe')]
                    
                    if not exe_files:
                        return render_template('index.html', message="No .exe file found in ZIP.")

                    exe_path = exe_files[0]
                    header_bytes = extract_pe_header_bytes(exe_path)
                    img = bytes_to_image(header_bytes)
                    
                    save_path = os.path.join('static', 'uploads', 'pe_header_signature.png')
                    img.save(save_path)

                    return render_template('index.html', image_path=save_path)

            except RuntimeError:
                return render_template('index.html', message="Incorrect password or corrupted ZIP file.")
            
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
